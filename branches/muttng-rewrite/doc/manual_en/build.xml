<?xml version="1.0" encoding="utf-8"?>
<chapter id="building">
  <title>Building and installation</title>

  <section id="build-systems"> <!--{{{-->
    <title>Supported systems</title>

    <p>
      Mutt-ng is known to work on the following systems:
    </p>

    <ul>
      <li>Linux: gcc</li>
      <li>FreeBSD: 5.x with gcc 3.4/4.0</li>
      <li>Solaris: 5.9 with gcc 3.4/Sun Workshop Pro 9.0</li>
    </ul>

  </section>
  <!--}}}-->

  <section id="build-requirements"> <!--{{{-->
    <title>Build Requirements</title>

    <p>      
      For building mutt-ng, you need to have the following software installed
      and working:
    </p>

    <ul>
      <li>GNU make. Others won't work as the makefiles use GNU make-only constructs.</li>
      <li>A C and C++ compiler. Currently supported are the GNU Compiler Collection and
        Sun Microsystems' workshop pro compiler suite.</li>
      <li>Optionally, for building and running the unit tests, Unit++ (see
        <web>http://unitpp.sf.net/</web>) must be installed.</li>
    </ul>

    <p>
      Everything should build if these requirements are met. However, as Perl scripts are
      used to generate some parts of the source code automatically which are already
      under version control, Perl isn't mandatory. On the other hand it can't
      do any harm if it's installed.
    </p>

    <p>
      For building muttng's homepage as well as the manual, the following tools must be
      installed and setup properly:
    </p>

    <ul>
      <li>XSL processor. Currently only <man>xsltproc</man> is supported though patches
        for others such as xalan are highly welcome.</li>
      <li>DocBook stylesheets for version 4.3.</li>
    </ul>

    <p>
      In addition, for building the source code's documentation,
      <man>doxygen</man> (see <web>http://www.doxygen.org/</web>) is required.
    </p>

  </section>
  <!--}}}-->

  <section id="build-config"> <!--{{{-->
    <title>Build Configuration</title>

    <p>
      In order to make the build process work at all, you need to create
      a file called <tt>GNUmakefile.config.mine</tt> in the top-level
      directory, i.e. in <tt>mutt-ng/branches/muttng-rewrite</tt>.
    </p>

    <p>
      There you can set various options. Most important are the following:
    </p>

    <ul>
      <li><tt>CCSTYLE=(gcc|suncc)</tt>. Wether to assume use of GNU or Sun
        C/C++ compilers. Default: <tt>gcc</tt>.</li>
      <li><tt>DEBUG=(0|1).</tt> Whether to pass <tt>-g</tt> to the
        compilers/linkers. This is useful for running a debuger. This is not
        the same as the feature to make mutt-ng print debug messages (which
        currently cannot be turned off). Default: <tt>0</tt>.</li>
      <li><tt>UNITPPDIR=/path</tt>. Where Unit++ (see
        <web>http://unitpp.sf.net/</web>) for
        running the unit tests is installed. Default: <tt>/usr</tt>.</li>
    </ul>

  </section>
  
  <!--}}}-->

  <section id="build-app"> <!--{{{-->
    <title>Building applications</title>

    <p>
      From the <tt>src</tt> subdirectory, the following are important targets:
    </p>

    <ul>
      <li><tt>depend.</tt> Please always run "make depend" first.</li>
      <li><tt>all.</tt> Build everything.</li>
      <li><tt>test.</tt> Build an run all unit tests.</li>
      <li><tt>srcdoc.</tt> Run <man>doxygen</man> to generate the docs from source.
        The output will be placed in the <tt>doxygen</tt> directory. <b>NOTE:</b> you
        need the graphviz package, too. If not, look through the file
        <tt>src/Doxyfile</tt> and there for a line called
        <tt>HAVE_DOT</tt>. Change the <tt>YES</tt> into <tt>NO.</tt></li>
    </ul>

    <p>
      Building the main applications should be as easy as the following:
    </p>

    <pre>
$ cd ./src &amp;&amp; make depend &amp;&amp; make</pre>

    <p>
      If any build process fails, please notify the developers via
      <email>mutt-ng-devel@lists.berlios.de</email>.
    </p>
 
  </section> <!--}}}-->

</chapter>
