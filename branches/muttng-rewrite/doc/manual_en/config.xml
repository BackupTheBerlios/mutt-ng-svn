<?xml version="1.0" encoding="utf-8"?>
<chapter id="configuration">
  <title>Configuration</title>

  <section id="config-syntax"> <!--{{{-->
    <title>Syntax of configuration files</title>

    <subsection id="config-syntax-quote">
      <title>Quoting</title>

      <p>
        For flexibility, mutt-ng distincts between two types of quoted
        strings:
      </p>

      <ol>
        <li>single-quoted</li>
        <li>double-quoted</li>
      </ol>

      <p>
        The difference between these two is that the latter is expanded
        or completed during reading the configuration files while the
        first one is expanded during use (if at all.) This is the standard
        behavior with many other applications already starting the
        shell. Consider the following example:
      </p>

      <listing lang="muttngrc" id="sample-config-quoting"
        title="Quoting types">
set folder = "$HOME/Maildir/inbox"
set folder = '$HOME/Maildir/inbox'</listing>

      <p>
        Here, the first line would be expanded during reading it
        to the full path, i.e. the string <env>HOME</env> is replaced
        with its value since the string is enclosed in double quotes.
        The first one will not be expanded so that it contains
        <tt>$HOME/Maildir/inbox</tt> during runtime. A more comprehensive
        listing of such supported expansions is given in the next section.
      </p>

      <p>
        When reading configuration files, exactly one level of
        backslashes is stripped. For example,
      </p>

      <listing lang="muttngrc" id="sample-config-backslash"
        title="Backslash stripping">
set variable = "\"foo\\\"bar\""</listing>

      <p>
        will be <inlinelisting lang="muttngrc">"foo\"bar"</inlinelisting> at runtime.
      </p>

    </subsection>

    <subsection id="config-syntax-expand">
      <title>Expansion</title>

      <p>
        The following items are expanded or replace during
        reading configuration files:
      </p>

      <ul>
        <li><tt>$NAME</tt> or <tt>${NAME}</tt>. These are interpreted
          as variables and can be either environment are configuration
          variables while environment variables take precedence. This
          means that if no environment variable <tt>NAME</tt> is found,
          the configuration variable <tt>NAME</tt> is tried. Such a 
          name may consist of letters, digits and underscore. If a
          variable value is to be embedded into a sequence of such
          characters the latter syntax with curly braces may be used
          so mutt-ng can clearly identify what the name is.</li>
        <li>if a backslash is found, several special tokens may
          appear, see <docref type="table" href="table-config-backslash">
            the table</docref> for a full listing</li>
        <li>if a charet symbol is found, several special tokens
          appear, see <docref type="table" href="table-config-charet">
            the table</docref> for a full listing</li>
        <li>if a sequence is enclosed in backticks (<tt>`</tt>),
          it's replaced by the output of the command enclosed</li>
      </ul>

      <tab cols="3" texstr="l|l|l" id="table-config-backslash"> <!--{{{-->
        <cap>Backslash expansion</cap>
        <th>
          <tr><td>Sequence</td><td>Replacement</td><td>Meaning</td></tr>
        </th>
        <tb>

          <tr>
            <td><tt>cX</tt> or <tt>CX</tt></td>
            <td><tt>CTRL+X</tt></td>
            <td>control character</td>
          </tr>

          <tr>
            <td><tt>r</tt></td>
            <td><tt>r</tt></td>
            <td>carriage return</td>
          </tr>

          <tr>
            <td><tt>n</tt></td>
            <td><tt>n</tt></td>
            <td>newline</td>
          </tr>

          <tr>
            <td><tt>t</tt></td>
            <td><tt>t</tt></td>
            <td>tabulator</td>
          </tr>

          <tr>
            <td><tt>e</tt> or <tt>E</tt></td>
            <td><tt>escape</tt></td>
            <td>escape character</td>
          </tr>

          <tr>
            <td><tt>XYZ</tt></td>
            <td>character</td>
            <td>octal character <tt>XYZ</tt></td>
          </tr>

          <tr>
            <td><tt>xAB</tt></td>
            <td>character</td>
            <td>hex character <tt>0xAB</tt></td>
          </tr>

        </tb>
      </tab> <!--}}}-->

      <tab cols="3" texstr="l|l|l" id="table-config-charet"> <!--{{{-->
        <cap>Charet expansion</cap>
        <th>
          <tr><td>Sequence</td><td>Replacement</td><td>Meaning</td></tr>
        </th>
        <tb>

          <tr>
            <td>two charets</td>
            <td>charet</td>
            <td>charet character</td>
          </tr>

          <tr>
            <td>bracket</td>
            <td><tt>escape</tt></td>
            <td>escape character</td>
          </tr>

          <tr>
            <td><tt>X</tt></td>
            <td><tt>CTRL+X</tt></td>
            <td>control character</td>
          </tr>

        </tb>
      </tab> <!--}}}-->

    </subsection>

  </section> <!--}}}-->

  <section id="config-commands"> <!--{{{-->
    <title>Configuration commands</title>

    <p>
      The following commands are available for dealing with options:
      <tt>set,</tt> <tt>unset,</tt> <tt>reset,</tt> <tt>toggle</tt> and <tt>query</tt>.
    </p>

    <p>
      The <tt>set</tt> command sets an option to a value. If no particular
      value is given for <tt>quad-option</tt> and <tt>bool</tt> types, <tt>yes</tt> is
      assumed.
    </p>

    <p>
      The <tt>unset</tt> command unsets a value to a neutral value. The
      neutral values depend on the option's type:
    </p>

    <ul>
      <li><tt>boolean</tt> and <tt>quad-option</tt>: <tt>no</tt></li>
      <li><tt>number</tt>; <tt>0</tt></li>
      <li><tt>string</tt> and <tt>url</tt>: the empty string/url ""</li>
    </ul>

    <p>
      The <tt>reset</tt> command changes a value to its default.
    </p>

    <p>   
      The <tt>toggle</tt> command inverts a <tt>bool</tt> or <tt>quad-option</tt> value
      and is not allowed for other option types.
    </p>

    <p>
      The <tt>query</tt> command displays the current value for any option.
    </p>

  </section> <!--}}}-->

  <section id="config-types"> <!--{{{-->
    <title>Configuration options</title>

    <p>The following types of configuration options are supported:</p>

    <ul>
      <li><b><tt>boolean</tt></b>: A boolean option. Possible values are:
        <tt>yes</tt>, <tt>no</tt>.</li>
      <li><b><tt>number</tt></b>: A numeric option. Most of the options are
        positive-only numbers but some allow negative values. The
        documentation for the options list these and, in addition,
        mutt-ng will perform strict checks and report error for
        invalid ranges.</li>
      <li><b><tt>string</tt></b>: A string. As for numbers, most options allow any
        value but some allow only for a few magic words given in the
        option documentation. Mutt-ng will perform strict checks and
        print errors for invalid values, i.e. non-magic words.</li>
      <li><b><tt>quad-option</tt></b>: A "question" with the feature to already
        answer it and thus skip any prompts with a given value.
        Possible values are: <tt>yes,</tt> <tt>no,</tt> <tt>ask-yes</tt> and <tt>ask-no.</tt>
        When an option is used and it's either <tt>ask-yes</tt> and <tt>ask-no,</tt>
        a prompt will query for a result highlighting the given
        choice, <tt>yes</tt> or <tt>no</tt> respectively. With settings of <tt>yes</tt>
        or <tt>no,</tt> the question is assumed to be answered already.</li>
      <li><b><tt>url</tt></b>: A URL for specifying folders. Basically, the
        following syntax is allowed:
        <pre>
proto[s]://[username[:password]@]host[:port]/path</pre>
        where valid protocols are: <tt>imap,</tt> <tt>nntp,</tt> <tt>pop,</tt> <tt>smtp</tt>
        and <tt>file.</tt> The <tt>file</tt> protocol is treated specially as it
        doesn't allow the secure pointer <tt>[s]</tt> and only contains a
        path. For compatibility reasons, if an URL doesn't contain a
        protocoll, <tt>file</tt> is assumed.</li>
      <li><b><tt>regular expression</tt></b>. A regular expression.</li>
      <li><b><tt>system</tt></b>. A read-only system variable. These can be only
        queried or used but not set or changed by the user but may change
        during runtime.</li>
    </ul>

  </section> <!--}}}-->

  <section id="config-incompat"> <!--{{{-->
    <title>Incompatible changes</title>

    <p>
      Compared to mutt and mutt-ng, there're some incompatible changes:
    </p>

    <ul>
      <li>The <inlinelisting lang="muttngrc">set <b>?</b>foo</inlinelisting> syntax isn't allowed any longer. For
        this purpose, the <tt>query</tt> command is to be used instead:
        <inlinelisting lang="muttngrc">query foo</inlinelisting></li>
      <li>The <inlinelisting lang="muttngrc">set <b>no</b>foo</inlinelisting> syntax isn't allowed any
        longer. For this purpose, use <inlinelisting lang="muttngrc">unset foo</inlinelisting> instead.</li>
      <li>The <inlinelisting lang="muttngrc">set <b>inv</b>foo</inlinelisting> syntax isn't allowed any
        longer. For this purpose, use <inlinelisting lang="muttngrc">toggle foo</inlinelisting> instead.</li>
      <li>The <inlinelisting lang="muttngrc">set <b>&amp;</b>foo</inlinelisting> syntax isn't allowed any
        longer. For this purpose, use <inlinelisting lang="muttngrc">reset foo</inlinelisting> instead.</li>
    </ul>

  </section> <!--}}}-->

</chapter>
